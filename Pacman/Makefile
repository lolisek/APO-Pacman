CC = arm-linux-gnueabihf-gcc
CXX = arm-linux-gnueabihf-g++

# -----custom edits below-----
SRC_DIR = src
MICROZED_DIR = $(SRC_DIR)/microzed
FONTS_DIR = $(SRC_DIR)/fonts
INC_DIR = include
BUILD_DIR = build
# -----custom edits above-----

CPPFLAGS = -I $(INC_DIR)
CFLAGS = -g -std=gnu99 -O1 -Wall
CXXFLAGS = -g -std=gnu++11 -O1 -Wall
#LDFLAGS +=
LDFLAGS += -static
LDLIBS += -lrt -lpthread
#LDLIBS += -lm

# Source files
SOURCES = $(SRC_DIR)/main.c \
          $(MICROZED_DIR)/mzapo_phys.c \
          $(MICROZED_DIR)/mzapo_parlcd.c \
          $(MICROZED_DIR)/serialize_lock.c \
          $(FONTS_DIR)/font_prop14x16.c \
          $(FONTS_DIR)/font_rom8x16.c

# Target executable
TARGET_EXE = pacman_mzapo
#TARGET_IP ?= 192.168.202.127
ifeq ($(TARGET_IP),)
ifneq ($(filter debug run,$(MAKECMDGOALS)),)
$(warning The target IP address is not set)
$(warning Run as "TARGET_IP=192.168.202.xxx make run" or modify Makefile)
TARGET_IP ?= 192.168.202.xxx
endif
endif
TARGET_DIR ?= /tmp/$(shell whoami)
TARGET_USER ?= root
# for use from Eduroam network use TARGET_IP=localhost and enable next line
#SSH_OPTIONS=-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o "Port=2222"
#SSH_GDB_TUNNEL_REQUIRED=y
#SSH_OPTIONS=-i /opt/zynq/ssh-connect/mzapo-root-key
#SSH_OPTIONS=-o 'ProxyJump=ctu_login@postel.felk.cvut.cz'


# Object files (placed in the build directory)
OBJECTS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(notdir $(SOURCES)))


#$(warning OBJECTS=$(OBJECTS))

ifeq ($(filter %.cpp,$(SOURCES)),)
LINKER = $(CC)
LDFLAGS += $(CFLAGS) $(CPPFLAGS)
else
LINKER = $(CXX)
LDFLAGS += $(CXXFLAGS) $(CPPFLAGS)
endif


# Ensure the build directory exists
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Build the project
all: $(TARGET_EXE)

# Rule to compile C source files into object files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ -c $<

$(BUILD_DIR)/%.o: $(MICROZED_DIR)/%.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ -c $<

$(BUILD_DIR)/%.o: $(FONTS_DIR)/%.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ -c $<


# Link the object files into the final executable
$(TARGET_EXE): $(OBJECTS)
	$(LINKER) $(LDFLAGS) -L. $^ -o $@ $(LDLIBS)


.PHONY : dep all run copy-executable debug

dep: depend

depend: $(SOURCES) $(INC_DIR)/*.h
	echo '# autogenerated dependencies' > depend

ifneq ($(filter %.c,$(SOURCES)),)
	$(CC) $(CFLAGS) $(CPPFLAGS) -w -E -M $(filter %.c,$(SOURCES)) \
	  >> depend
endif
ifneq ($(filter %.cpp,$(SOURCES)),)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -w -E -M $(filter %.cpp,$(SOURCES)) \
	  >> depend
endif


$(warning SOURCES=$(SOURCES))
$(warning OBJECTS=$(OBJECTS))
$(warning TARGET_EXE=$(TARGET_EXE))
$(warning TARGET_IP=$(TARGET_IP))
$(warning TARGET_DIR=$(TARGET_DIR))


# Clean up build artifacts
clean:
	rm -f *.o *.a $(OBJECTS) $(TARGET_EXE) connect.gdb depend


# Copy the executable to the target device
copy-executable: $(TARGET_EXE)
	ssh $(SSH_OPTIONS) -t $(TARGET_USER)@$(TARGET_IP) killall gdbserver 1>/dev/null 2>/dev/null || true
	ssh $(SSH_OPTIONS) $(TARGET_USER)@$(TARGET_IP) mkdir -p $(TARGET_DIR)
	scp $(SSH_OPTIONS) $(TARGET_EXE) $(TARGET_USER)@$(TARGET_IP):$(TARGET_DIR)/$(TARGET_EXE)

# Run the executable on the target device
run: copy-executable $(TARGET_EXE)
	ssh $(SSH_OPTIONS) -t $(TARGET_USER)@$(TARGET_IP) $(TARGET_DIR)/$(TARGET_EXE)

# Debugging setup
ifneq ($(filter -o ProxyJump=,$(SSH_OPTIONS))$(SSH_GDB_TUNNEL_REQUIRED),)
SSH_GDB_PORT_FORWARD=-L 12345:127.0.0.1:12345
TARGET_GDB_PORT=127.0.0.1:12345
else
TARGET_GDB_PORT=$(TARGET_IP):12345
endif

debug: copy-executable $(TARGET_EXE)
	xterm -e ssh $(SSH_OPTIONS) $(SSH_GDB_PORT_FORWARD) -t $(TARGET_USER)@$(TARGET_IP) gdbserver :12345 $(TARGET_DIR)/$(TARGET_EXE) &
	sleep 2
	echo >connect.gdb "target extended-remote $(TARGET_GDB_PORT)"
	echo >>connect.gdb "b main"
	echo >>connect.gdb "c"
	ddd --debugger gdb-multiarch -x connect.gdb $(TARGET_EXE)

# Include dependencies
-include depend

